class Node:
    def __init__(self, value):
        self.value= value
        self.left_subtree =None
        self.right_subtree= None
        self.tree_height =1
class AVLTree:
    def __init__(self):
        self.root=None
    def _retrieve_height(self, node):
        if node is None:
            return 0
        return node.tree_height
    def _get_balance_factor(self, node):
        if node is None:
            return 0
        return self._retrieve_height(node.left_subtree)-self._retrieve_height(node.right_subtree)
    def _rotate_right(self, z):
        y=z.left_subtree
        temp_right=y.right_subtree
        y.right_subtree=z
        z.left_subtree=temp_right
        z.tree_height=1+ max(self._retrieve_height(z.left_subtree),self._retrieve_height(z.right_subtree))
        y.tree_height=1 + max(self._retrieve_height(y.left_subtree),self._retrieve_height(y.right_subtree))
        return y
    def _rotate_left(self, z):
        y=z.right_subtree
        temp_left= y.left_subtree
        y.left_subtree=z
        z.right_subtree=temp_left
        z.tree_height=1+ max(self._retrieve_height(z.left_subtree), self._retrieve_height(z.right_subtree))
        y.tree_height = 1 +max(self._retrieve_height(y.left_subtree), self._retrieve_height(y.right_subtree))
        return y
    def insert(self,value):
        self.root=self._insert_node(self.root, value)
    def _insert_node(self,current_node, value):
        if current_node is None:
            return Node(value)
        elif value<current_node.value:
            current_node.left_subtree=self._insert_node(current_node.left_subtree, value)
        else:
            current_node.right_subtree=self._insert_node(current_node.right_subtree, value)
        current_node.tree_height=1+max(self._retrieve_height(current_node.left_subtree), self._retrieve_height(current_node.right_subtree))
        balance_factor=self._get_balance_factor(current_node)
        # Left Left Case
        if balance_factor>1 and value<current_node.left_subtree.value:
            return self._rotate_right(current_node)
        # Right Right Case
        if balance_factor < -1 and value > current_node.right_subtree.value:
            return self._rotate_left(current_node)
        # Left Right Case
        if balance_factor>1 and value > current_node.left_subtree.value:
            current_node.left_subtree=self._rotate_left(current_node.left_subtree)
            return self._rotate_right(current_node)
        # Right Left Case
        if balance_factor <-1 and value < current_node.right_subtree.value:
            current_node.right_subtree= self._rotate_right(current_node.right_subtree)
            return self._rotate_left(current_node)
        return current_node
    def delete(self,value):
        self.root =self._delete_node(self.root, value)
    def _delete_node(self,current_node, value):
        if current_node is None:
            return current_node
        if value<current_node.value:
            current_node.left_subtree=self._delete_node(current_node.left_subtree, value)
        elif value>current_node.value:
            current_node.right_subtree=self._delete_node(current_node.right_subtree, value)
        else:
            if current_node.left_subtree is None:
                temp=current_node.right_subtree
                current_node=None
                return temp
            elif current_node.right_subtree is None:
                temp=current_node.left_subtree
                current_node=None
                return temp
            temp=self._get_min_value_node(current_node.right_subtree)
            current_node.value=temp.value
            current_node.right_subtree=self._delete_node(current_node.right_subtree, temp.value)
        if current_node is None:
            return current_node
        current_node.tree_height=1+max(self._retrieve_height(current_node.left_subtree), self._retrieve_height(current_node.right_subtree))
        balance_factor=self._get_balance_factor(current_node)
        # Left Left Case
        if balance_factor>1 and self._get_balance_factor(current_node.left_subtree)>= 0:
            return self._rotate_right(current_node)
        # Right Right Case
        if balance_factor < -1 and self._get_balance_factor(current_node.right_subtree) <= 0:
            return self._rotate_left(current_node)
        # Left Right Case
        if balance_factor > 1 and self._get_balance_factor(current_node.left_subtree) < 0:
            current_node.left_subtree = self._rotate_left(current_node.left_subtree)
            return self._rotate_right(current_node)
        # Right Left Case
        if balance_factor< -1 and self._get_balance_factor(current_node.right_subtree) > 0:
            current_node.right_subtree=self._rotate_right(current_node.right_subtree)
            return self._rotate_left(current_node)
        return current_node
    def _get_min_value_node(self, node):
        present = node
        while present.left_subtree is not None:
            present =present.left_subtree
        return present

    def inorder_traversal(self):
        result=[]
        self._inorder_traverse(self.root, result)
        return result

    def _inorder_traverse(self, node, result):
        if node:
            self._inorder_traverse(node.left_subtree, result)
            result.append(node.value)
            self._inorder_traverse(node.right_subtree, result)

if __name__ == "__main__":
    avl_tree = AVLTree()
    input_values=[30, 20, 40, 10, -25, -35, -50]
    for value in input_values:
        avl_tree.insert(value)

    print("Inorder Traversal:")
    print(avl_tree.inorder_traversal())
    avl_tree.delete(20)
    print("Inorder Traversal after deleting 20:")
    print(avl_tree.inorder_traversal())
